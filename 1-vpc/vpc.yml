AWSTemplateFormatVersion: 2010-09-09
Description: CFN Template for VPC.
Mappings:
  SubnetMap:
      dev: "40"
      uat: "20"
      prod: "30"


Parameters:
  Environment:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    AllowedValues: [dev, uat, prod]
    Default: dev
    ConstraintDescription: 'Specify either dev, uat or prod.'
  HostedZoneName:
    Type: String
    Default: mydomain.com
    Description: Zone Name myodmain.com

Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref Environment], ".0.0/16" ] ]
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  DHCP1:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !Join [ '', [  !Ref Environment,'-int.', !Ref HostedZoneName ] ]
      DomainNameServers:
        - !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], ".0.2" ] ]
      Tags:
        - Key: Name
          Value: AWS_DHCP
  VPCDHCPOptionsAssociation:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref myVPC
      DhcpOptionsId: !Ref DHCP1
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Join [ '', [  !Ref Environment,'-int.', !Ref HostedZoneName ] ]
      HostedZoneConfig:
        Comment: Domain name
      VPCs:
        - VPCId: !Ref myVPC
          VPCRegion: !Ref 'AWS::Region'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.1.0/24' ] ]
      AvailabilityZone: !Join [ '', [  !Ref AWS::Region,'a' ] ]
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'public', 'subnet1' ] ]
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: !Join [ '', [ kubernetes.io/cluster/, !Ref Environment, '-eks' ] ]
          Value: shared
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment],'.2.0/24' ] ]
      AvailabilityZone: !Join [ '', [  !Ref AWS::Region,'b' ] ]
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'public', 'subnet2' ] ]
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: !Join [ '', [ kubernetes.io/cluster/, !Ref Environment, '-eks' ] ]
          Value: shared
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Join [ '', [ '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.10.0/24' ] ]
      AvailabilityZone: !Join [ '', [  !Ref AWS::Region, 'a' ] ]
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'private', 'subnet1' ] ]
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: !Join [ '', [ kubernetes.io/cluster/, !Ref Environment, '-eks' ] ]
          Value: shared
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Join [ '', [ '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment],'.20.0/24'] ]
      AvailabilityZone: !Join [ '', [  !Ref AWS::Region,'b' ] ]
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'private', 'subnet2' ] ]
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: !Join [ '', [ kubernetes.io/cluster/, !Ref Environment, '-eks' ] ]
          Value: shared
  RoutePrivateToNAT1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'RoutePrivateToNAT1' ] ]
  RoutePrivateToNAT2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'RoutePrivateToNAT2' ] ]
  RoutePublicToIGW:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'RoutePublicToIGW' ] ]
  IGW1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref Environment, 'IGW1' ] ]
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref IGW1
  eip1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  eip2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NAT1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - eip1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT for Private1
    DependsOn: gw1
  NAT2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - eip2
        - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NAT for Private2
    DependsOn: gw1
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RoutePrivateToNAT1
      NatGatewayId: !Ref NAT1
  route2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RoutePrivateToNAT2
      NatGatewayId: !Ref NAT2
  route3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RoutePublicToIGW
      GatewayId: !Ref IGW1
    DependsOn: gw1
  subnetroute1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutePrivateToNAT1
      SubnetId: !Ref PrivateSubnet1
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutePrivateToNAT2
      SubnetId: !Ref PrivateSubnet2
  subnetroute3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutePublicToIGW
      SubnetId: !Ref PublicSubnet1
  subnetroute4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RoutePublicToIGW
      SubnetId: !Ref PublicSubnet2
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl
      SubnetId: !Ref PublicSubnet1
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl
      SubnetId: !Ref PrivateSubnet1
  subnetacl3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl
      SubnetId: !Ref PublicSubnet2
  subnetacl4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl
      SubnetId: !Ref PrivateSubnet2
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !GetAtt
        - myVPC
        - DefaultNetworkAcl

Outputs:
  EnvCidr:
    Value: !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], ".0.0/16" ] ]
    Description: EnvCidr from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-EnvCidr"
  VpcId:
    Value: !Ref myVPC
    Description: VpcId from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Description: PrivateSubnet1 from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet1CIDR:
    Value: !Join [ '', [ '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.10.0/24' ] ]
    Description: CIDR of PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1CIDR"
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Description: PrivateSubnet2 from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  PrivateSubnet2CIDR:
    Value: !Join [ '', [ '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.20.0/24' ] ]
    Description: CIDR of PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2CIDR"
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Description: PublicSubnet1 from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSubnet1CIDR:
    Value: !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.1.0/24' ] ]
    Description: CIDR of PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1CIDR"
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Description: PublicSubnet2 from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  PublicSubnet2CIDR:
    Value: !Join [ '', [  '10.', !FindInMap [SubnetMap, !Ref AWS::AccountId, !Ref Environment], '.2.0/24' ] ]
    Description: CIDR of PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2CIDR"
  HostedZoneId:
    Value: !Ref HostedZone
    Description: HostedZoneId from vpc.yml
    Export:
      Name: !Sub "${AWS::StackName}-HostedZoneId"
  VPCStackName:
    Value:  !Sub ${AWS::StackName}
    Description: Stickname from vpc.yml
